webpackJsonp([9],{"0ha5":function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a("m1BQ"),r=a("Edt2"),s=a("VU/8")(n.a,r.a,!1,null,null,null);s.options.__file="pages/javascript-iteration.vue",t.default=s.exports},Edt2:function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("main",{attrs:{id:"main",tabindex:"-1"}},[a("h1",[e._v("Javascript iteration")]),e._m(0),a("p",[e._v("Now that you know how to work with data in JavaScript, and how to alter the page using the DOM, it's time to put the two together and create data-driven web pages.")]),a("p",[e._v("So far you've created pages where you've typed in all of the content by hand, but in many cases, you will want at least some of that content to be derived from data that are stored separately and change over time. Wouldn't it be cool if you could dynamically build some of your page's content based on some data you have in JavaScript as an array of objects? Well, you're in luck; the DOM provides us mechanisms to do just that.")]),a("h2",{attrs:{id:"sec-creatingpopulatingandappendingnewelements"}},[e._v("Creating, Populating, and Appending New Elements")]),e._m(1),e._m(2),e._m(3),e._m(4),e._m(5),e._m(6),a("h2",{attrs:{id:"sec-htmltables"}},[e._v("HTML Tables")]),a("p",[e._v("If we want to display tabular data in our web pages, the most appropriate elements to use are those that create an HTML table. Like a spreadsheet, an HTML table presents tabular data in rows and columns. Each row should present data from one record or observation, and each column should present one property from each record or observation. Columns should be labeled with a title, and may also have an optional footer for displaying totals or other statistics for the column.")]),e._m(7),e._m(8),e._m(9),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),a("h2",{attrs:{id:"sec-buildingtablesfromdata"}},[e._v("Building Tables from Data")]),e._m(17),a("p",[e._v("For example, say we had the data from above in a JavaScript array of objects:")]),e._m(18),e._m(19),e._m(20),e._m(21),e._m(22),e._m(23),e._m(24),e._m(25),e._m(26),e._m(27),e._m(28),e._m(29),a("h2",{attrs:{id:"sec-usingblocksofhtmlastemplates"}},[e._v("Using Blocks of HTML as Templates")]),e._m(30),e._m(31),a("p",[e._v("For example, say you had this block of HTML in your web page:")]),e._m(32),e._m(33),e._m(34),a("p",[e._v("To use this template, we need to write a little JavaScript. Our first function will render one record given a template:")]),e._m(35),e._m(36),e._m(37),e._m(38),a("p",[e._v("This function will create a single card from a record and template, so to create all cards for all records, we need another function:")]),e._m(39),e._m(40),a("p",[e._v("To call this, we just need to select our template element, and pass it as the second parameter:")]),e._m(41),a("h2",{attrs:{id:"sec-templatinglibraries"}},[e._v("Templating Libraries")]),a("p",[e._v("This process of merging data with a template is so common that several JavaScript libraries have been created to make the process even easier. These libraries use special syntax to indicate where data values should appear, and many support simple conditionals and looping/repeating right in the template itself.")]),e._m(42),a("pre",[a("code",{staticClass:"html language-html"},[e._v('\x3c!-- handlebars library --\x3e\n<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.6/handlebars.min.js"><\/script>\n\n\x3c!-- our template --\x3e\n<script id="person-template" type="text/x-handlebars-template">\n    <div class="mdl-card mdl-shadow--2dp">\n        <div class="mdl-card__title">\n            <h2 class="mdl-card__title-text">\n                '+e._s(e.fname)+" "+e._s(e.lname)+'\n            </h2>\n        </div>\n        <div class="mdl-card__supporting-text">\n            '+e._s(e.description)+'\n        </div>\n        <div class="mdl-card__actions mdl-card--border">\n            <a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect"\n                href="mailto:'+e._s(e.email)+'">\n                Contact\n            </a>\n        </div>\n    </div>\n<\/script>')])]),e._m(43),e._m(44),a("p",[e._v("To use this template, we first use the Handlebars library to compile it:")]),e._m(45),e._m(46),e._m(47),e._m(48),e._m(49),a("h2",{attrs:{id:"sec-othertemplatinglibraries"}},[e._v("Other Templating Libraries")]),e._m(50)])};n._withStripped=!0;var r={render:n,staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/RWGRbxkmvKU?rel=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In the previous tutorial and challenge you learned how to alter existing elements in your page, but the DOM also allows us to create new elements that don't yet exist. This is done using the\n      "),t("code",[this._v("document.createElement()")]),this._v(" method:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('//create a new <p> element\nvar myNewPara = document.createElement("p");\n\n//set its text content\nmyNewPara.textContent = "Hello World!";')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The\n      "),t("code",[this._v("document.createElement()")]),this._v(" method creates a new disconnected, free-floating DOM element in memory, and we can manipulate it just like any other DOM element, but it won't appear on screen until we actually add it to the page. To add it to the page, we need to append it as a child element of some existing element in the tree. For example, say we want that new paragraph element to appear at the bottom of our page. If we append it as a new child of the\n      "),t("code",[this._v("<body>")]),this._v(" element, it will appear at the very bottom of the body, after all existing child elements:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('//select the <body> element\nvar body = document.querySelector("body");\n\n//append our new <p> element as a new child of <body>\nbody.appendChild(myNewPara);')])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("The\n      "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"}},[a("code",[e._v(".appendChild()")])]),e._v(" method is available on all DOM elements, so you can append new elements as children of any existing element on your page. The\n      "),a("code",[e._v(".appendChild()")]),e._v(" method will always append your new element to the\n      "),a("em",[e._v("end")]),e._v(" of the existing children list, but if you would rather add it\n      "),a("em",[e._v("before")]),e._v(" some existing child, you can use the\n      "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore"}},[a("code",[e._v(".insertBefore()")])]),e._v(" instead.")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("There is also a corresponding\n      "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild"}},[a("code",[e._v(".removeChild()")])]),e._v(" to remove a specific child element from another element. But if you simply want to clear\n      "),a("em",[e._v("all")]),e._v(" content from a given element (child elements and/or text), it's much faster and simpler to set the element's\n      "),a("code",[e._v(".textContent")]),e._v(" property to an empty string (\n      "),a("code",[e._v('""')]),e._v(");")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("HTML tables have a similar element structure to HTML pages. They start with a single element named\n      "),t("code",[this._v("<table>")]),this._v(", which contains two elements: one for the table header (column headings); and one for the table body (the data rows).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"html language-html"},[this._v("<table>\n    <thead>\n        \x3c!-- column headings --\x3e\n    </thead>\n    <tbody>\n        \x3c!-- table rows --\x3e\n    </tbody>\n</table>")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The\n      "),t("code",[this._v("<thead>")]),this._v(" element should contain one table row element (\n      "),t("code",[this._v("<tr>")]),this._v("), and that row should contain one table header element (\n      "),t("code",[this._v("<th>")]),this._v(") for each column you want to display:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"html language-html"},[this._v("<table>\n    <thead>\n        <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Age</th>\n        </tr>\n    </thead>\n    <tbody>\n        \x3c!-- table rows --\x3e\n    </tbody>\n</table>")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("By default, browsers will render\n      "),t("code",[this._v("<th>")]),this._v(" elements in bold, but you can override this using CSS, just like any other element.")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("The\n      "),a("code",[e._v("<tbody>")]),e._v(" element should contain one table row element for each data row, and each row should contain table data cell elements (\n      "),a("code",[e._v("<td>")]),e._v(") for each column. For obvious reasons, the number of\n      "),a("code",[e._v("<td>")]),e._v(" elements per row should match the number of\n      "),a("code",[e._v("<th>")]),e._v(" elements in the\n      "),a("code",[e._v("<thead>")]),e._v(" section. If there is no data for the column, simply leave the contents of the\n      "),a("code",[e._v("<td>")]),e._v(" element blank.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"html language-html"},[this._v("<table>\n    <thead>\n        <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Age</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>John</td>\n            <td>Smith</td>\n            <td>35</td>\n        </tr>\n        <tr>\n            <td>Jane</td>\n            <td>Lee</td>\n            <td>29</td>\n        </tr>\n    </tbody>\n</table>")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("When the browser renders the table, it will ensure that all of the columns line-up, regardless of how much content happens to be within a given cell. By default, the content in each cell will be left-aligned, but you can adjust that using CSS. For example, it's common to set the CSS property\n      "),t("code",[this._v("text-align: right")]),this._v(" on elements containing numeric content so that the numbers are right-aligned. You can define one CSS style class that applies this formatting, and then add that style class to any\n      "),t("code",[this._v("<td>")]),this._v(" that displays numeric data, as well as the\n      "),t("code",[this._v("<th>")]),this._v(" for that column:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"css language-css"},[this._v(".numeric {\n    text-align: right;\n}")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"html language-html"},[this._v('<table>\n    <thead>\n        <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th class="numeric">Age</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>John</td>\n            <td>Smith</td>\n            <td class="numeric">35</td>\n        </tr>\n        <tr>\n            <td>Jane</td>\n            <td>Lee</td>\n            <td class="numeric">29</td>\n        </tr>\n    </tbody>\n</table>')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Now suppose we wanted to build this HTML table dynamically from data. If we know the shape of the data ahead of time, we could continue to hard-code the\n      "),t("code",[this._v("<thead>")]),this._v(" and\n      "),t("code",[this._v("<th>")]),this._v(" elements, as those remain the same regardless of the data rows, but leave the\n      "),t("code",[this._v("<tbody>")]),this._v(" empty, appending one row per record in our data.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('var people = [\n    {\n        fname: "John",\n        lname: "Smith",\n        age: 35,\n        email: "jsmith@example.com",\n        description: "..."\n    },\n    {\n        fname: "Jane",\n        lname: "Lee",\n        age: 29,\n        email: "jlee@example.com",\n        description: "..."\n    }\n];')])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("This creates an array with two objects, each of which has the same set of properties:\n      "),a("code",[e._v("fname")]),e._v(",\n      "),a("code",[e._v("lname")]),e._v(",\n      "),a("code",[e._v("age")]),e._v(",\n      "),a("code",[e._v("email")]),e._v(", and\n      "),a("code",[e._v("description")]),e._v(". This is conceptually similar to the\n      "),a("code",[e._v("MOVIES")]),e._v(" array you worked with in an earlier challenge.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Our goal is create one\n      "),t("code",[this._v("<tr>")]),this._v(" for each record, with\n      "),t("code",[this._v("<td>")]),this._v(" elements for each of the properties. The best way to do that is to break up the task into a few reusable functions. The fist would be a function that can create, populate, and return a new\n      "),t("code",[this._v("<td>")]),this._v(" element given some value and a flag to indicate whether the value should be formatted as numeric:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('function renderTableCell(value, isNumeric) {\n    //create the new <td> element\n    var td = document.createElement("td");\n\n    //set its text content to the provided value\n    td.textContent = value;\n\n    //if it should be formatted as numeric...\n    if (isNumeric) {\n        //add the "numeric" style class\n        td.classList.add("numeric");\n    }\n\n    //return the new element to the caller\n    return td;\n}')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The function name starts with\n      "),t("code",[this._v("render")]),this._v(" because that's what we typically call functions that transform raw data into some kind of content that can be shown to a human.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The next function you need is one that can create a new\n      "),t("code",[this._v("<tr>")]),this._v(" element and populate it with associated\n      "),t("code",[this._v("<td>")]),this._v(" elements, given one of the records, which is a JavaScript object.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('function renderPersonRow(person) {\n    //create the <tr> element\n    var tr = document.createElement("tr");\n\n    //create and append the <td> elements\n    tr.appendChild(renderTableCell(person.fname));\n    tr.appendChild(renderTableCell(person.lname));\n    tr.appendChild(renderTableCell(person.age, true));\n\n    //return the table row to the caller\n    return tr;\n}')])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("Here we use our existing\n      "),a("code",[e._v("renderTableCell()")]),e._v(" function to create the various\n      "),a("code",[e._v("<td>")]),e._v(" elements. Each time we pass a different property from the person record as the\n      "),a("code",[e._v("value")]),e._v(" parameter. For the first two, we omit the second\n      "),a("code",[e._v("isNumeric")]),e._v(" parameter, but we set it to\n      "),a("code",[e._v("true")]),e._v(" on the last call, as that property should be formatted as a number. Omitted parameters in JavaScript are automatically set to\n      "),a("code",[e._v("undefined")]),e._v(", and that\n      "),a("a",{attrs:{href:"https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md#truthy--falsy"}},[e._v("will evaluate as\n        "),a("code",[e._v("false")])]),e._v(" when we test it with the\n      "),a("code",[e._v("if ()")]),e._v(" condition, so omitting the parameter is the same as passing\n      "),a("code",[e._v("false")]),e._v(".")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("These two functions will create a fully populated\n      "),a("code",[e._v("<tr>")]),e._v(" element in-memory, but we still need to append that\n      "),a("code",[e._v("<tr>")]),e._v(" to the\n      "),a("code",[e._v("<tbody>")]),e._v(" in order for it to be displayed on the page. That requires a third function, which accepts the entire array of people records, loops over the array elements, calling\n      "),a("code",[e._v("renderPersonRow()")]),e._v(" for each, and appending the returned table row to the\n      "),a("code",[e._v("<tbody>")]),e._v(" element:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('function renderPeopleTable(peopleArray) {\n    //select the <tbody> element\n    //you can make this more precise by using a descendant selector,\n    //referring to a particular <table> by ID or style class name\n    var tbody = document.querySelector("tbody");\n\n    //clear any existing content in the body\n    tbody.textContent = "";\n\n    //for each element in the array...\n    for (var idx = 0; idx < peopleArray.length; idx++) {\n        //get the person record at the current index\n        var person = peopleArray[idx];\n\n        //render that person record as a <tr> with <td>s\n        //and append it to the <tbody>\n        tbody.appendChild(renderPersonRow(person));\n    }\n}')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Now we can call our\n      "),t("code",[this._v("renderPeopleTable()")]),this._v(", passing the array of records, and it will dynamically populate the\n      "),t("code",[this._v("<tbody>")]),this._v(" based on whatever happens to be in the array:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v("//var people = [...] from above\nrenderPeopleTable(people);")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Tables have a fairly simple and rigid structure, so it's easy to just create\n      "),t("code",[this._v("<tr>")]),this._v(" and\n      "),t("code",[this._v("<td>")]),this._v(" elements as you run through an array of data. But suppose you wanted to render these people using something like an MDL card layout, which requires significantly more HTML per-record. You could create all of the requisite elements, just as we did with the table rows and cells, but it might be easier to define a template instead.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("A\n      "),t("strong",[this._v("template")]),this._v(" is a block of HTML that you want to repeat for each record in your data array. The HTML could be quite complex, with lots of nested\n      "),t("code",[this._v("<div>")]),this._v(" elements and style classes, but only the elements that actually contain data would need to change for each of the data records. You can define this block of HTML once in your page, and then use JavaScript to clone, populate, and append it for each data record. ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"html language-html"},[this._v('\x3c!-- template for each person record --\x3e\n<div hidden id="person-template" class="mdl-card mdl-shadow--2dp">\n    <div class="mdl-card__title">\n        <h2 class="person-name mdl-card__title-text"></h2>\n    </div>\n    <div class="person-description mdl-card__supporting-text"></div>\n    <div class="mdl-card__actions mdl-card--border">\n        <a class="contact-person-button mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" href="#">\n            Contact\n        </a>\n    </div>\n</div>')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("There are a few things to note about this HTML block. First, the outermost\n      "),t("code",[this._v("<div>")]),this._v(" element has an attribute named\n      "),t("code",[this._v("hidden")]),this._v(". This tells the browser not to display this block of HTML on the page, and it tells assistive technologies like screen readers to ignore it. This content is simply a template that we will clone and populate later for each record, so we don't want the empty template itself showing up on screen.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Second, I've added particular style class names to the various elements within this block that will show data values. For example, the\n      "),t("code",[this._v("<h2>")]),this._v(" element has a style class named\n      "),t("code",[this._v("person-name")]),this._v(" in addition to all the other MDL-specific style classes. This will allow us to find and populate these elements easily after we clone the template. It will also make it easy to style the data.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('function renderPersonCard(person, template) {\n    //deep clone the template\n    var card = template.cloneNode(true);\n\n    //remove the `hidden` attribute from the clone\n    //so that it will be displayed\n    card.removeAttribute("hidden");\n\n    //populate the various descendant elements with data\n    //person name\n    var fullName = person.fname + " " + person.lname;\n    card.querySelector(".person-name").textContent = fullName;\n\n    //person description\n    card.querySelector(".person-description").textContent = person.description;\n\n    //contact button link\n    card.querySelector(".contact-person-button").href = "mailto:" + person.email;\n\n    //return the cloned, populated card\n    return card;\n}')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Every DOM element has a\n      "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode"}},[t("code",[this._v(".cloneNode()")])]),this._v(" method that will create a copy of the element. If you pass\n      "),t("code",[this._v("true")]),this._v(" as the first parameter, it will create a\n      "),t("strong",[this._v("deep copy")]),this._v(", which means it makes a copy of all the descendant elements as well. When you create a deep copy, the returned elements are completely new and separate from the ones you cloned. Modifying the copy won't alter the original template.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("But when we copy, we get all attributes and child elements, including the\n      "),t("code",[this._v("hidden")]),this._v(" attribute on the template. We don't want this on the clone as we intend to populate the clone and show it on screen, so the second line of code removes that attribute from the copy.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("We then use our style classes to find the descendant elements whose text content should be set to the data values. Here we use the\n      "),t("code",[this._v(".querySelector()")]),this._v(" method on the clone element so that it only searches the descendants of that element, and not the entire document.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('function renderPeopleCards(peopleArray, template) {\n    //create a <div> to hold all of the cards\n    var div = document.createElement("div");\n\n    //for each data record...\n    for (var idx = 0; idx < peopleArray.length; idx++) {\n        //get the person record at the current index\n        var person = peopleArray[idx];\n\n        //create and append a card\n        div.appendChild(renderPersonCard(person, template));\n    }\n\n    return div;\n}')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This function creates a new\n      "),t("code",[this._v("<div>")]),this._v(" to hold all of the cards, and then just loops through the array, calling\n      "),t("code",[this._v("renderPersonCard()")]),this._v(" for each element, and appending the returned card to the\n      "),t("code",[this._v("<div>")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('//select the element with id="person-template"\nvar template = document.querySelector("#person-template");\nvar cards = renderPersonCards(people, template);\n\n//append the cards to some existing element so that they appear\nvar main = document.querySelector("main");\nmain.appendChild(cards);')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("A simple and popular templating library is\n      "),t("a",{attrs:{href:"http://handlebarsjs.com/"}},[this._v("Handlebars")]),this._v(". The template above would look like this when using Handlebars:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Because Handlebars extends the HTML syntax, they prefer you to put Handlebars templates inside a\n      "),t("code",[this._v('<script type="text/x-handlebars-template">')]),this._v(" element. The browser will not interpret this as JavaScript, but will instead ignore it, figuring that some other program will interpret the contents later. It will also be ignored by HTML validators.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Note how the template contains several\n      "),t("code",[this._v("{ {...} }")]),this._v(" expressions. These double curly braces denote something that Handlebars will replace with data when the template is merged. If you tilt your head 90 degrees, the double curly braces will look like handlebar mustaches, hence the name of the library!")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('//get the contents of the id="person-template" element\nvar source = document.querySelector("#person-template").innerHTML;\n\n//compile that into a function that we can use to create\n//fully-populated copies of the template\nvar templateFunc = Handlebars.compile(source);')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The variable\n      "),t("code",[this._v("templateFunc")]),this._v(" is actually a function that accepts a JavaScript data object as its first parameter. The function will merge that data with the template, returning the fully-populated HTML as a string.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"javascript language-javascript"},[this._v('//copy and populate the template, returning HTML as a string\nvar cardHTML = templateFunc(people[0]);\n\n//select an element you want to contain the generated HTML\n//and set its .innerHTML property\nvar main = document.createElement("main");\nmain.innerHTML = cardHTML;')])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("Calling\n      "),a("code",[e._v("templateFunc()")]),e._v(" causes Handlebars to merge the data passed as the first parameter with the template. Everyplace you have\n      "),a("code",[e._v("{ {...} }")]),e._v(" in your template, Handlebars evaluates the\n      "),a("a",{attrs:{href:"http://handlebarsjs.com/expressions.html"}},[e._v("expression")]),e._v(" between the curly braces against the data object you passed as the first parameter. Typically these are just property names (e.g.,\n      "),a("code",[e._v("fname")]),e._v(",\n      "),a("code",[e._v("email")]),e._v("), and Handlebars will replace the entire\n      "),a("code",[e._v("{ {...} }")]),e._v(" expression with the value of that property. As Handlebars does this, it automatically escapes any HTML that might be in the property, so the results will be as safe as if you had set the element's\n      "),a("code",[e._v(".textContent")]),e._v(" property. ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The Handlebars template function returns the merged HTML as a string, so it's not yet a real DOM element. To make it display on screen, select an existing element and set its\n      "),t("code",[this._v(".innerHTML")]),this._v(" property. Or you can create a new\n      "),t("code",[this._v("<div>")]),this._v(" element, set its\n      "),t("code",[this._v(".innerHTML")]),this._v(" property, and append it to some existing element.")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("Handlebars is just one of many templating libraries in the JavaScript world, but they all operate on the same basic principles. The most popular these days, but also the most complex, is\n      "),a("a",{attrs:{href:"https://reactjs.org/"}},[e._v("React.js")]),e._v(". They take the approach of embedding the template right in your JavaScript, using a special syntax extension they've defined named JSX (JavaScript Expressions). Using this requires special build tools, so it's far beyond a Beginning Web Development Course. But if you're interested in learning more about React, see their\n      "),a("a",{attrs:{href:"https://reactjs.org/tutorial/tutorial.html"}},[e._v("Tutorial")]),e._v(" as well as their documentation on\n      "),a("a",{attrs:{href:"https://reactjs.org/docs/try-react.html"}},[e._v("Installation")]),e._v(",\n      "),a("a",{attrs:{href:"https://reactjs.org/docs/introducing-jsx.html"}},[e._v("JSX")]),e._v(", and\n      "),a("a",{attrs:{href:"https://reactjs.org/docs/components-and-props.html"}},[e._v("Components and Props")]),e._v(".")])}]};t.a=r},m1BQ:function(e,t,a){"use strict";t.a={head:{title:"Javascript iteration"},mounted:function(){Prism.highlightAll()}}}});